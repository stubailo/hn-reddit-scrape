{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"domain": "unix-heaven.org", "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "1zmndk", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "dnaeon", "media": null, "score": 71, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 25, "saved": false, "is_self": false, "permalink": "/r/Python/comments/1zmndk/how_i_managed_to_get_shell_access_to/", "name": "t3_1zmndk", "created": 1394060301.0, "url": "http://unix-heaven.org/node/109", "author_flair_text": null, "title": "How I managed to get shell access to groklearning.com using Python?", "created_utc": 1394031501.0, "ups": 96, "num_comments": 16, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "pyohio.org", "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "1zojuo", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "Kitanata", "media": null, "score": 5, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/Python/comments/1zojuo/the_2014_pyohio_website_is_now_live_and_accepting/", "name": "t3_1zojuo", "created": 1394099685.0, "url": "http://pyohio.org", "author_flair_text": null, "title": "The 2014 PyOhio website is now live and accepting speaking proposals.", "created_utc": 1394070885.0, "ups": 5, "num_comments": 1, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "github.com", "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "1zo5bl", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "tiaxthemighty", "media": null, "score": 7, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/Python/comments/1zo5bl/pyokc_a_package_for_okcupid/", "name": "t3_1zo5bl", "created": 1394090778.0, "url": "https://github.com/evfredericksen/pyokc", "author_flair_text": null, "title": "Pyokc: A package for OKCupid", "created_utc": 1394061978.0, "ups": 7, "num_comments": 0, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "github.com", "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "1zo9x5", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "rasbt", "media": null, "score": 5, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/Python/comments/1zo9x5/prynotes_web_based_note_application_save_your/", "name": "t3_1zo9x5", "created": 1394093518.0, "url": "https://github.com/derek3x/PryNotes", "author_flair_text": null, "title": "PryNotes - Web based note application. Save your ideas, notes, todo lists, recipes, news articles or anything you find online. Keep it safe and secure with encryption and in a database that won't be mined or sold.", "created_utc": 1394064718.0, "ups": 5, "num_comments": 0, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "openhatch.org", "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "1zo9q1", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "rasbt", "media": null, "score": 5, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/Python/comments/1zo9q1/openhatch_wiki_contributing_to_python/", "name": "t3_1zo9q1", "created": 1394093400.0, "url": "https://openhatch.org/wiki/Contributing_to_Python", "author_flair_text": null, "title": "OpenHatch Wiki - Contributing to Python - Instructions for getting started with contributing to Python", "created_utc": 1394064600.0, "ups": 5, "num_comments": 0, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "py3readiness.org", "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "1znszm", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "chhantyal", "media": null, "score": 6, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 2, "saved": false, "is_self": false, "permalink": "/r/Python/comments/1znszm/state_of_python_3_popular_library_support/", "name": "t3_1znszm", "created": 1394083979.0, "url": "http://py3readiness.org/", "author_flair_text": null, "title": "State of Python 3 - popular library support", "created_utc": 1394055179.0, "ups": 8, "num_comments": 2, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "informit.com", "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "1zmgfl", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "twillis1973", "media": null, "score": 23, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": false, "link_flair_css_class": null, "author_flair_css_class": "", "downs": 9, "saved": false, "is_self": false, "permalink": "/r/Python/comments/1zmgfl/an_introduction_to_python_web_development_using/", "name": "t3_1zmgfl", "created": 1394054698.0, "url": "http://www.informit.com/articles/article.aspx?p=2161676", "author_flair_text": "37 pieces is the bare minimum", "title": "An Introduction to Python Web Development Using the Pyramid Framework Part 1 of 7", "created_utc": 1394025898.0, "ups": 32, "num_comments": 14, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "pydanny.com", "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "1zo9u5", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "rasbt", "media": null, "score": 3, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/Python/comments/1zo9u5/docstrings_and_various_python_objects/", "name": "t3_1zo9u5", "created": 1394093474.0, "url": "http://pydanny.com/docstrings-and-various-python-objects.html", "author_flair_text": null, "title": "Docstrings and Various Python Objects", "created_utc": 1394064674.0, "ups": 3, "num_comments": 0, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "lukauskas.co.uk", "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "1zkfux", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "GrumpySimon", "media": null, "score": 180, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 35, "saved": false, "is_self": false, "permalink": "/r/Python/comments/1zkfux/how_to_make_python_faster_without_trying_that_much/", "name": "t3_1zkfux", "created": 1393998662.0, "url": "http://lukauskas.co.uk/articles/2014/02/12/how-to-make-python-faster-without-trying-that-much/?utm_content=bufferb1618&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer", "author_flair_text": null, "title": "How to Make Python Faster Without Trying That Much", "created_utc": 1393969862.0, "ups": 215, "num_comments": 25, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.Python", "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Has anyone created any high-level functions for PyVisa with Agilent oscilloscopes? I just got a MSOX3034A at work, got the Agilent VISA drivers installed and PyVisa up and running, but I&amp;#39;m stuck with their string command and response protocol per the programmer&amp;#39;s manual &lt;a href=\"http://www.home.agilent.com/upload/cmc_upload/All/3000_series_prog_guide.pdf?&amp;amp;cc=US&amp;amp;lc=eng\"&gt;http://www.home.agilent.com/upload/cmc_upload/All/3000_series_prog_guide.pdf?&amp;amp;cc=US&amp;amp;lc=eng&lt;/a&gt; and it&amp;#39;s slow going.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Has anyone created any high-level functions for PyVisa with Agilent oscilloscopes? I just got a MSOX3034A at work, got the Agilent VISA drivers installed and PyVisa up and running, but I'm stuck with their string command and response protocol per the programmer's manual http://www.home.agilent.com/upload/cmc_upload/All/3000_series_prog_guide.pdf?&amp;cc=US&amp;lc=eng and it's slow going.", "likes": null, "secure_media": null, "link_flair_text": null, "id": "1zoeb2", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "jms_nh", "media": null, "score": 1, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/Python/comments/1zoeb2/highlevel_functions_for_pyvisa_with_agilent/", "name": "t3_1zoeb2", "created": 1394096225.0, "url": "http://www.reddit.com/r/Python/comments/1zoeb2/highlevel_functions_for_pyvisa_with_agilent/", "author_flair_text": null, "title": "high-level functions for PyVisa with Agilent oscilloscopes?", "created_utc": 1394067425.0, "ups": 1, "num_comments": 0, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "developer.rackspace.com", "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "1zo9sv", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "rasbt", "media": null, "score": 0, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 1, "saved": false, "is_self": false, "permalink": "/r/Python/comments/1zo9sv/exploring_apache_jclouds_with_groovy_a_python/", "name": "t3_1zo9sv", "created": 1394093445.0, "url": "http://developer.rackspace.com/blog/exploring-jclouds-a-python-developers-point-of-view.html", "author_flair_text": null, "title": "Exploring Apache Jclouds With Groovy: A Python Developers Point of View", "created_utc": 1394064645.0, "ups": 1, "num_comments": 0, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "blog.startifact.com", "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "1zmolz", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "faassen", "media": null, "score": 5, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 1, "saved": false, "is_self": false, "permalink": "/r/Python/comments/1zmolz/webob_and_werkzeug_compared/", "name": "t3_1zmolz", "created": 1394061100.0, "url": "http://blog.startifact.com/posts/webob-and-werkzeug-compared.html", "author_flair_text": null, "title": "WebOb and Werkzeug compared", "created_utc": 1394032300.0, "ups": 6, "num_comments": 3, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "programiz.com", "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "1zmlnv", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "prosuv", "media": null, "score": 6, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/Python/comments/1zmlnv/getting_started_with_metaprogramming_in_python/", "name": "t3_1zmlnv", "created": 1394059049.0, "url": "http://www.programiz.com/python-programming/decorator", "author_flair_text": null, "title": "Getting started with metaprogramming in Python: Decorators", "created_utc": 1394030249.0, "ups": 6, "num_comments": 0, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "wiki.python.org", "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "1znck4", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "yourbasicgeek", "media": null, "score": 2, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 9, "saved": false, "is_self": false, "permalink": "/r/Python/comments/1znck4/pyladies_is_working_with_the_python_software/", "name": "t3_1znck4", "created": 1394075091.0, "url": "https://wiki.python.org/moin/OPW/2014", "author_flair_text": null, "title": "PyLadies is working with the Python Software Foundation to support paid Python internships for women this summer through the GNOME Outreach Program for Women.", "created_utc": 1394046291.0, "ups": 11, "num_comments": 1, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "lgiordani.github.io", "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "1zmx0d", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "lgiordani", "media": null, "score": 4, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 1, "saved": false, "is_self": false, "permalink": "/r/Python/comments/1zmx0d/oop_concepts_in_python_2x_part_1/", "name": "t3_1zmx0d", "created": 1394066260.0, "url": "http://lgiordani.github.io/blog/2014/03/05/oop-concepts-in-python-2-dot-x-part-1/", "author_flair_text": null, "title": "OOP Concepts in Python 2.x - Part 1", "created_utc": 1394037460.0, "ups": 5, "num_comments": 5, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.Python", "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;After reading that relative imports are deemed obsolete and looking trough the django repository I decided to convert my newest script. Four hours later, reading PEP 328 and PEP 8 twice and nearly every stackoverflow entry on the topic I can&amp;#39;t get anything to work.&lt;/p&gt;\n\n&lt;p&gt;I created a minimalistic project to experiment and even then it doesn&amp;#39;t work. My projects must all be setup in a way that completely goes against the norm or there is something fundamental about absolute imports I still don&amp;#39;t get. I&amp;#39;m still on Python 2.7 by the way.&lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s the minimalistic setup:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package/__init__.py\n\npackage/run.py\n    from package.loader import Loader\n    from package.utilities import convert\n\n    def run():\n        convert()\n    run()\n\npackage/loader.py\n    class Loader(object):\n        pass\n\npackage/utilities/__init__.py\n    from package.utilities.convert import convert # Convenience import\n\npackage/utilities/convert.py\n    from package.utilities.extract import extract\n\n    def convert():\n        extract()\n\npackage/utilities/extract.py\n    def extract():\n        print &amp;#39;It works!&amp;#39;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Changing the current directory to package/ and running run.py doesn&amp;#39;t work. &lt;em&gt;ImportError: No module named package.loader&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;But that&amp;#39;s the way I&amp;#39;ve always done it in the past. Of course changing just the imports in run.py to relative imports doesn&amp;#39;t work either. Some of the examples on stackoverflow actually state that something like the above is supposed to work. But it doesn&amp;#39;t for me at all. &lt;a href=\"https://stackoverflow.com/questions/11951941/python-absolute-import-for-module-in-the-same-directory\"&gt;This&lt;/a&gt; one for example. Comparable setup. But doesn&amp;#39;t seem to work if I run something like &lt;em&gt;python b.py&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;What works is going one directory up to /, starting the interpreter and doing something like&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from package.run import run\nrun() # It work&amp;#39;s!\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;My question is, in what way is my thinking wrong? I just want to use absolute imports across the whole project. Many projects seem to do it that way and django pretty much uses the same syntax everywhere, the difference beeing that there is a setup step inbetween and the code mostly beeing imported instead of beeing ran directly.&lt;/p&gt;\n\n&lt;p&gt;Can&amp;#39;t the file that is actually executed reside in &amp;quot;package&amp;quot;? The documentation on absolute imports is so damn sparse.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "After reading that relative imports are deemed obsolete and looking trough the django repository I decided to convert my newest script. Four hours later, reading PEP 328 and PEP 8 twice and nearly every stackoverflow entry on the topic I can't get anything to work.\n\nI created a minimalistic project to experiment and even then it doesn't work. My projects must all be setup in a way that completely goes against the norm or there is something fundamental about absolute imports I still don't get. I'm still on Python 2.7 by the way.\n\nHere's the minimalistic setup:\n\n    package/__init__.py\n\n    package/run.py\n        from package.loader import Loader\n        from package.utilities import convert\n        \n        def run():\n            convert()\n        run()\n\n    package/loader.py\n        class Loader(object):\n            pass\n\n    package/utilities/__init__.py\n        from package.utilities.convert import convert # Convenience import\n\n    package/utilities/convert.py\n        from package.utilities.extract import extract\n        \n        def convert():\n            extract()\n\n    package/utilities/extract.py\n        def extract():\n            print 'It works!'\n\nChanging the current directory to package/ and running run.py doesn't work. *ImportError: No module named package.loader*.\n\nBut that's the way I've always done it in the past. Of course changing just the imports in run.py to relative imports doesn't work either. Some of the examples on stackoverflow actually state that something like the above is supposed to work. But it doesn't for me at all. [This](https://stackoverflow.com/questions/11951941/python-absolute-import-for-module-in-the-same-directory) one for example. Comparable setup. But doesn't seem to work if I run something like *python b.py*.\n\nWhat works is going one directory up to /, starting the interpreter and doing something like\n\n    from package.run import run\n    run() # It work's!\n\nMy question is, in what way is my thinking wrong? I just want to use absolute imports across the whole project. Many projects seem to do it that way and django pretty much uses the same syntax everywhere, the difference beeing that there is a setup step inbetween and the code mostly beeing imported instead of beeing ran directly.\n\nCan't the file that is actually executed reside in \"package\"? The documentation on absolute imports is so damn sparse.", "likes": null, "secure_media": null, "link_flair_text": null, "id": "1zntxr", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "HolyCowly", "media": null, "score": 0, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": 1394056498.0, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 1, "saved": false, "is_self": true, "permalink": "/r/Python/comments/1zntxr/i_cant_wrap_my_head_around_absolute_imports/", "name": "t3_1zntxr", "created": 1394084528.0, "url": "http://www.reddit.com/r/Python/comments/1zntxr/i_cant_wrap_my_head_around_absolute_imports/", "author_flair_text": null, "title": "I can't wrap my head around absolute imports.", "created_utc": 1394055728.0, "ups": 1, "num_comments": 6, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "toptal.com", "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "1zmp66", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "mguillech", "media": null, "score": 4, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 4, "saved": false, "is_self": false, "permalink": "/r/Python/comments/1zmp66/an_overly_thorough_guide_to_python_class/", "name": "t3_1zmp66", "created": 1394061459.0, "url": "http://www.toptal.com/python/python-class-attributes-an-overly-thorough-guide", "author_flair_text": null, "title": "An Overly Thorough Guide to Python Class Attributes", "created_utc": 1394032659.0, "ups": 8, "num_comments": 0, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "giantflyingsaucer.com", "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "1znprz", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "chadlung", "media": null, "score": 1, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/Python/comments/1znprz/building_a_simple_rest_application_with_pecan/", "name": "t3_1znprz", "created": 1394082239.0, "url": "http://www.giantflyingsaucer.com/blog/?p=4834", "author_flair_text": null, "title": "Building a (simple) ReST application with Pecan (pecanpy)", "created_utc": 1394053439.0, "ups": 1, "num_comments": 0, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.Python", "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi guys.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;d like to work on a software that would allow to smoothly render inputs pressed on a gamecube controller plugged via an adapter at the screen. Do you know if there is a Python library to work with peripherals ?&lt;/p&gt;\n\n&lt;p&gt;Thanks in advance.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Hi guys.\n\nI'd like to work on a software that would allow to smoothly render inputs pressed on a gamecube controller plugged via an adapter at the screen. Do you know if there is a Python library to work with peripherals ?\n\nThanks in advance.", "likes": null, "secure_media": null, "link_flair_text": null, "id": "1zm48k", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "Nephophobic", "media": null, "score": 6, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/Python/comments/1zm48k/peripheral_interaction_library/", "name": "t3_1zm48k", "created": 1394040257.0, "url": "http://www.reddit.com/r/Python/comments/1zm48k/peripheral_interaction_library/", "author_flair_text": null, "title": "Peripheral interaction library ?", "created_utc": 1394011457.0, "ups": 6, "num_comments": 2, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.Python", "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have a fresh install of Linux Mint 16 and I would like to set up a Python environment. I am coming from a C#/Java background but I&amp;#39;d like to expand into Python because I&amp;#39;m lured by it and I want to focus on it as a main language.&lt;/p&gt;\n\n&lt;p&gt;I am following this guide: &lt;a href=\"http://docs.python-guide.org/en/latest/starting/install/linux/\"&gt;here&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Currently I am stuck on distribute. I may be doing it wrong, but as of this moment I am downloading the script, saving it with a .py extension, and then attempting to run it through command line by cd-ing to the path and then giving &amp;quot;python distribute.py&amp;quot; as my command. It gives me this error that I have permissions issue to install in some specific folder. My questions is two fold.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;How do I enable permissions to install? I have tried doing &amp;quot;sudo -i&amp;quot; and then &amp;quot;python distribute.py&amp;quot; but it says that the script doesn&amp;#39;t work. I think this may be the wrong idea as &amp;quot;cd&amp;quot; command also doesn&amp;#39;t work.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Is there a later or better guide I should be following? I understand there are dangers to following an out-dated guide, but this seems very recent to the best of my knowledge.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I have a fresh install of Linux Mint 16 and I would like to set up a Python environment. I am coming from a C#/Java background but I'd like to expand into Python because I'm lured by it and I want to focus on it as a main language.\n\nI am following this guide: [here](http://docs.python-guide.org/en/latest/starting/install/linux/)\n\nCurrently I am stuck on distribute. I may be doing it wrong, but as of this moment I am downloading the script, saving it with a .py extension, and then attempting to run it through command line by cd-ing to the path and then giving \"python distribute.py\" as my command. It gives me this error that I have permissions issue to install in some specific folder. My questions is two fold.\n\n1. How do I enable permissions to install? I have tried doing \"sudo -i\" and then \"python distribute.py\" but it says that the script doesn't work. I think this may be the wrong idea as \"cd\" command also doesn't work.\n\n2. Is there a later or better guide I should be following? I understand there are dangers to following an out-dated guide, but this seems very recent to the best of my knowledge.\n\n", "likes": null, "secure_media": null, "link_flair_text": null, "id": "1znw16", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "MagicalHoneydew", "media": null, "score": 0, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 3, "saved": false, "is_self": true, "permalink": "/r/Python/comments/1znw16/installing_python_environment_on_linux_mint_16/", "name": "t3_1znw16", "created": 1394085647.0, "url": "http://www.reddit.com/r/Python/comments/1znw16/installing_python_environment_on_linux_mint_16/", "author_flair_text": null, "title": "Installing Python environment on Linux Mint 16 Cinnamon", "created_utc": 1394056847.0, "ups": 1, "num_comments": 4, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "developers.lyst.com", "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "1zjlau", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "jmduke", "media": null, "score": 88, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 12, "saved": false, "is_self": false, "permalink": "/r/Python/comments/1zjlau/image_background_removal/", "name": "t3_1zjlau", "created": 1393982420.0, "url": "http://developers.lyst.com/data/images/2014/02/13/background-removal/", "author_flair_text": null, "title": "Image Background Removal", "created_utc": 1393953620.0, "ups": 100, "num_comments": 4, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.Python", "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Using the python &lt;a href=\"http://stackoverflow.com/questions/9282967/\"&gt;with statement&lt;/a&gt;, you can read a file into a list without the newline character in one line of code.  This works with Python 2 and 3.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;with open(fname) as fp: lines = fp.read().splitlines()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;lines is now a list containing the contents of fname without newlines at the end of each item.  The context manager, &amp;#39;with&amp;#39;, automatically closes the file pointer, fp.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Using the python [with statement](http://stackoverflow.com/questions/9282967/), you can read a file into a list without the newline character in one line of code.  This works with Python 2 and 3.\n\n    with open(fname) as fp: lines = fp.read().splitlines()\n\nlines is now a list containing the contents of fname without newlines at the end of each item.  The context manager, 'with', automatically closes the file pointer, fp.\n", "likes": null, "secure_media": null, "link_flair_text": null, "id": "1zmu8h", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "jftuga", "media": null, "score": 0, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 4, "saved": false, "is_self": true, "permalink": "/r/Python/comments/1zmu8h/one_liner_to_read_a_file_without_the_newline/", "name": "t3_1zmu8h", "created": 1394064621.0, "url": "http://www.reddit.com/r/Python/comments/1zmu8h/one_liner_to_read_a_file_without_the_newline/", "author_flair_text": null, "title": "One liner to read a file without the newline character", "created_utc": 1394035821.0, "ups": 2, "num_comments": 6, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.Python", "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;What problems does this avoid?  What tasks are made easier?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "What problems does this avoid?  What tasks are made easier?", "likes": null, "secure_media": null, "link_flair_text": null, "id": "1zjugg", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "omginternets", "media": null, "score": 51, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": false, "link_flair_css_class": null, "author_flair_css_class": "", "downs": 8, "saved": false, "is_self": true, "permalink": "/r/Python/comments/1zjugg/question_why_does_pep8_recommend_leaving_a_blank/", "name": "t3_1zjugg", "created": 1393987210.0, "url": "http://www.reddit.com/r/Python/comments/1zjugg/question_why_does_pep8_recommend_leaving_a_blank/", "author_flair_text": "Scientific Computing", "title": "Question: why does PEP8 recommend leaving a blank line at the end of a .py file?", "created_utc": 1393958410.0, "ups": 59, "num_comments": 25, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "datarobot.com", "banned_by": null, "media_embed": {}, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "1zmnr7", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "datacurator", "media": null, "score": 1, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 1, "saved": false, "is_self": false, "permalink": "/r/Python/comments/1zmnr7/classification_with_scikitlearn/", "name": "t3_1zmnr7", "created": 1394060514.0, "url": "http://www.datarobot.com/blog/classification-with-scikit-learn/", "author_flair_text": null, "title": "Classification with scikit-learn", "created_utc": 1394031714.0, "ups": 2, "num_comments": 0, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "youtube.com", "banned_by": null, "media_embed": {"content": "&lt;iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=http%3A%2F%2Fwww.youtube.com%2Fembed%2FmflvdXKyA_g%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DmflvdXKyA_g&amp;image=http%3A%2F%2Fi1.ytimg.com%2Fvi%2FmflvdXKyA_g%2Fhqdefault.jpg&amp;key=2aa3c4d5f3de4f5b9120b660ad850dc9&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"600\" height=\"338\" scrolling=\"no\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}, "subreddit": "Python", "selftext_html": null, "selftext": "", "likes": null, "secure_media": {"oembed": {"provider_url": "http://www.youtube.com/", "description": "How to use Emacs as a Python Editor/IDE. We explore the tricks of auto-complete, snippet expansion, simultaneous editing, indentation highlighting, etc.", "title": "Emacs as a Python Editor and IDE (Part 2): All the tricks of elpy.el, jedi and rope modes", "url": "http://www.youtube.com/watch?v=mflvdXKyA_g", "type": "video", "author_name": "b yuksel", "height": 338, "width": 600, "html": "&lt;iframe class=\"embedly-embed\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FmflvdXKyA_g%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DmflvdXKyA_g&amp;image=http%3A%2F%2Fi1.ytimg.com%2Fvi%2FmflvdXKyA_g%2Fhqdefault.jpg&amp;key=2aa3c4d5f3de4f5b9120b660ad850dc9&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"600\" height=\"338\" scrolling=\"no\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;", "thumbnail_width": 480, "version": "1.0", "provider_name": "YouTube", "thumbnail_url": "https://i.embed.ly/1/image?url=http%3A%2F%2Fi1.ytimg.com%2Fvi%2FmflvdXKyA_g%2Fhqdefault.jpg&amp;key=b1e305db91cf4aa5a86b732cc9fffceb", "thumbnail_height": 360, "author_url": "http://www.youtube.com/channel/UCibKclzsnnHjQZFOLuykZ1A"}, "type": "youtube.com"}, "link_flair_text": null, "id": "1zl3um", "gilded": 0, "secure_media_embed": {"content": "&lt;iframe class=\"embedly-embed\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FmflvdXKyA_g%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DmflvdXKyA_g&amp;image=http%3A%2F%2Fi1.ytimg.com%2Fvi%2FmflvdXKyA_g%2Fhqdefault.jpg&amp;key=2aa3c4d5f3de4f5b9120b660ad850dc9&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"600\" height=\"338\" scrolling=\"no\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}, "clicked": false, "stickied": false, "author": "jgomo3", "media": {"oembed": {"provider_url": "http://www.youtube.com/", "description": "How to use Emacs as a Python Editor/IDE. We explore the tricks of auto-complete, snippet expansion, simultaneous editing, indentation highlighting, etc.", "title": "Emacs as a Python Editor and IDE (Part 2): All the tricks of elpy.el, jedi and rope modes", "url": "http://www.youtube.com/watch?v=mflvdXKyA_g", "type": "video", "author_name": "b yuksel", "height": 338, "width": 600, "html": "&lt;iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=http%3A%2F%2Fwww.youtube.com%2Fembed%2FmflvdXKyA_g%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DmflvdXKyA_g&amp;image=http%3A%2F%2Fi1.ytimg.com%2Fvi%2FmflvdXKyA_g%2Fhqdefault.jpg&amp;key=2aa3c4d5f3de4f5b9120b660ad850dc9&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"600\" height=\"338\" scrolling=\"no\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;", "thumbnail_width": 480, "version": "1.0", "provider_name": "YouTube", "thumbnail_url": "http://i1.ytimg.com/vi/mflvdXKyA_g/hqdefault.jpg", "thumbnail_height": 360, "author_url": "http://www.youtube.com/channel/UCibKclzsnnHjQZFOLuykZ1A"}, "type": "youtube.com"}, "score": 7, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2qh0y", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 3, "saved": false, "is_self": false, "permalink": "/r/Python/comments/1zl3um/emacs_as_a_python_editor_and_ide_part_2_all_the/", "name": "t3_1zl3um", "created": 1394012425.0, "url": "https://www.youtube.com/watch?v=mflvdXKyA_g", "author_flair_text": null, "title": "Emacs as a Python Editor and IDE (Part 2): All the tricks of elpy.el, jedi and rope modes", "created_utc": 1393983625.0, "ups": 10, "num_comments": 0, "visited": false, "num_reports": null, "distinguished": null}}], "after": "t3_1zl3um", "before": null}}